{"version":3,"sources":["actions/types.js","NavBar.js","actions/logout.js","Api.js","actions/drugs.js","actions/resetInteractions.js","actions/currentUser.js","actions/loading.js","actions/searchTerm.js","drugs/SearchForm.js","drugs/InteractionList.js","actions/resetLoading.js","LoadingPage.js","drugs/Interactions.js","LoggedInHome.js","HomePage.js","users/Login.js","users/Signup.js","users/UserPage.js","Routes.js","App.js","serviceWorker.js","reducers/drugs.js","reducers/loading.js","reducers/searchTerm.js","reducers/currentUser.js","reducers/root.js","index.js"],"names":["SEARCH_DRUGS","RESET_INTERACTIONS","RESET_LOADING","SET_SEARCH_TERM","TOGGLE_LOADING","SET_CURRENT_USER","LOG_OUT","NavBar","currentUser","useSelector","st","dispatch","useDispatch","Navbar","bg","expand","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","isLoggedIn","username","Button","onClick","e","localStorage","removeItem","type","window","location","reload","BASE_URL","process","REACT_APP_BASE_URL","DrugInteractionApi","endpoint","data","method","console","debug","url","params","axios","error","response","drugName","this","request","res","drugArray","drugs","join","invalid","user","log","newUser","deleted","med_name","noneFound","saved","getInteractionsFromAPI","name","a","includes","drugArr","split","getMultipleInteractions","getInteractions","interactions","gotInteractions","payload","resetInteractions","setCurrentUser","getUser","setItem","JSON","stringify","gotCurrentUser","toggleLoading","setSearchTerm","searchTerm","SearchForm","useState","checked","setChecked","preventDefault","errorHolder","document","getElementById","innerText","trim","nameArray","savedDrugs","saveDrugToUser","useEffect","Form","onSubmit","Label","htmlFor","Control","placeholder","value","onChange","target","Group","controlId","Check","label","Text","muted","InteractionList","interactionsObj","interactionsTable","Object","entries","forEach","key","push","name1","name2","description","severity","comment","Table","responsive","striped","bordered","hover","resetLoading","LoadingPage","loadingMsg","Spinner","animation","role","Interactions","loading","keys","length","LoggedInHome","savedDrugsString","HomePage","Login","history","useHistory","password","formData","setFormData","loginError","login","result","handleChange","evt","l","as","Row","column","sm","Col","Signup","email","signupError","signup","UserPage","useParams","unsave","unsaveDrug","ListGroup","map","d","Item","size","Routes","exact","path","to","App","Boolean","hostname","match","INITIAL_STATE","state","action","getItem","parse","combineReducers","store","createStore","root","compose","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4140a33.chunk.js","sourcesContent":["export const SEARCH_DRUGS = \"SEARCH_DRUGS\";\nexport const RESET_INTERACTIONS = \"RESET_INTERACTIONS\";\nexport const RESET_LOADING = \"RESET_LOADING\";\nexport const SET_SEARCH_TERM = \"SET_SEARCH_TERM\";\nexport const TOGGLE_LOADING = \"TOGGLE_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\nexport const LOG_OUT = \"LOG_OUT\";\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Button from \"react-bootstrap/Button\";\nimport { logOut } from \"./actions/logout\";\n\nfunction NavBar() {\n  const currentUser = useSelector((st) => st.currentUser);\n  const dispatch = useDispatch();\n\n  function logOutUser(e) {\n    dispatch(logOut());\n    window.location.reload();\n  }\n\n  return (\n    <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n      <Navbar.Brand href=\"/\">Drug Interaction Hub</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/interactions\">Search Drug Interactions</Nav.Link>\n          {currentUser.isLoggedIn ? (\n            <Nav>\n              <Nav.Link href={\"/users/\" + currentUser.currentUser.username}>\n                My Saved Drugs\n              </Nav.Link>\n              <Button onClick={logOutUser} variant=\"outline-danger\">\n                Log Out\n              </Button>\n            </Nav>\n          ) : (\n            <Nav>\n              <Nav.Link href=\"/signup\">Sign Up</Nav.Link>\n              <Nav.Link href=\"/login\">Log In</Nav.Link>\n            </Nav>\n          )}\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default NavBar;\n","import { LOG_OUT } from \"./types\";\n\nfunction logOut() {\n  localStorage.removeItem(\"currentUser\");\n  return { type: LOG_OUT };\n}\n\nexport { logOut };\n","import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:5000/api\";\n\nclass DrugInteractionApi {\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({ url, method, data, params })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n    }\n  }\n\n  // API routes\n\n  // drug routes\n  static async getInteractions(drugName) {\n    /** get all interactions with one drug */\n    let res = await this.request(`interactions/search/single/${drugName}`);\n    return res;\n  }\n\n  static async getMultipleInteractions(drugArray) {\n    /** get interactions between multiple specified drugs */\n    let drugs = drugArray.join(\"+\");\n    let res = await this.request(`interactions/search/multiple/${drugs}`);\n    return res;\n  }\n\n  // user routes\n  static async login(data) {\n    /** login an existing user */\n    let res = await this.request(`users/login`, data, \"post\");\n    if (!res) {\n      return { invalid: \"invalid username/password combo\" };\n    }\n    return res.user;\n  }\n\n  static async signup(data) {\n    /** signup a new user */\n    let res = await this.request(`users/signup`, data, \"post\");\n    console.log(res, \"res from signup\");\n    if (res.invalid) {\n      return { invalid: res.invalid };\n    }\n    return res.newUser;\n  }\n\n  static async updateUser(username, data) {\n    /** update an existing user */\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  static async deleteUser(username) {\n    /** delete an existing user */\n    let res = await this.request(`users/${username}`, {}, \"delete\");\n    return res.deleted;\n  }\n\n  static async saveDrugToUser(username, med_name) {\n    /** save a drug to an existing user */\n    let res = await this.request(\n      `users/${username}/drugs/${med_name}`,\n      {},\n      \"post\"\n    );\n    if (res.noneFound) {\n      return res.noneFound;\n    } else {\n      return res.saved;\n    }\n  }\n\n  static async unsaveDrug(username, med_name) {\n    let res = await this.request(\n      `users/${username}/drugs/${med_name}`,\n      {},\n      \"delete\"\n    );\n    return res;\n  }\n\n  static async getUser(username) {\n    /** get username, email and saved drugs info on a saved user */\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n}\n\nexport default DrugInteractionApi;\n","import DrugInteractionApi from \"../Api\";\nimport { SEARCH_DRUGS } from \"./types\";\n\nfunction getInteractionsFromAPI(name) {\n  return async function (dispatch) {\n    let res;\n    if (name.includes(\",\")) {\n      let drugArr = name.split(\", \");\n      res = await DrugInteractionApi.getMultipleInteractions(drugArr);\n    } else {\n      res = await DrugInteractionApi.getInteractions(name);\n    }\n    const interactions = res.interactions;\n    dispatch(gotInteractions(interactions));\n  };\n}\n\nfunction gotInteractions(interactions) {\n  return { type: SEARCH_DRUGS, payload: interactions };\n}\n\nexport { getInteractionsFromAPI };\n","import { RESET_INTERACTIONS } from \"./types\";\n\nfunction resetInteractions() {\n  return { type: RESET_INTERACTIONS };\n}\n\nexport { resetInteractions };\n","import DrugInteractionApi from \"../Api\";\nimport { SET_CURRENT_USER } from \"./types\";\n\nfunction setCurrentUser(username) {\n  return async function (dispatch) {\n    let currentUser = await DrugInteractionApi.getUser(username);\n    localStorage.setItem(\"currentUser\", JSON.stringify(currentUser));\n    if (currentUser) {\n      dispatch(gotCurrentUser(currentUser));\n    }\n  };\n}\n\nfunction gotCurrentUser(currentUser) {\n  return { type: SET_CURRENT_USER, payload: currentUser };\n}\n\nexport { setCurrentUser };\n","import { TOGGLE_LOADING } from \"./types\";\n\nfunction toggleLoading() {\n  return { type: TOGGLE_LOADING };\n}\n\nexport { toggleLoading };\n","import { SET_SEARCH_TERM } from \"./types\";\n\nfunction setSearchTerm(searchTerm) {\n  return { type: SET_SEARCH_TERM, payload: searchTerm };\n}\n\nexport { setSearchTerm };\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getInteractionsFromAPI } from \"../actions/drugs\";\nimport { resetInteractions } from \"../actions/resetInteractions\";\nimport { setCurrentUser } from \"../actions/currentUser\";\nimport DrugInteractionApi from \"../Api\";\nimport { toggleLoading } from \"../actions/loading\";\nimport { setSearchTerm } from \"../actions/searchTerm\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction SearchForm() {\n  /** form for searching drug interactions - one search bar initially, can add multiple additional drugs */\n  const searchTerm = useSelector((st) => st.searchTerm.searchTerm);\n  const currentUser = useSelector((st) => st.currentUser);\n  const dispatch = useDispatch();\n  const [checked, setChecked] = useState(false);\n\n  useEffect(() => {\n    dispatch(resetInteractions());\n  }, [dispatch]);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let errorHolder = document.getElementById(\"error-holder\");\n    errorHolder.innerText = \"\";\n\n    if (!searchTerm) {\n      errorHolder.innerText = \"please enter a search term\";\n      dispatch(resetInteractions());\n      return;\n    }\n\n    dispatch(getInteractionsFromAPI(searchTerm.trim()));\n    // if it's checked, save the drugs to the database and the user\n    // then save the user with the new saved drugs\n    let res;\n    if (checked) {\n      let username = currentUser.currentUser.username;\n      if (searchTerm.includes(\",\")) {\n        // check to make sure the drug isn't already saved, if it isn't then add it.\n        const nameArray = searchTerm.split(\", \");\n        for (let name of nameArray) {\n          // if they haven't already saved the drug\n          if (currentUser.currentUser.savedDrugs.includes(name) !== true) {\n            res = await DrugInteractionApi.saveDrugToUser(username, name);\n          }\n        }\n      } else {\n        if (currentUser.currentUser.savedDrugs.includes(searchTerm) !== true) {\n          res = await DrugInteractionApi.saveDrugToUser(username, searchTerm);\n        }\n      }\n      dispatch(setCurrentUser(username));\n    }\n    if (!res) {\n      dispatch(toggleLoading());\n    }\n  }\n\n  function handleChange(e) {\n    dispatch(setSearchTerm(e.target.value));\n  }\n  function changeBool(e) {\n    setChecked(!checked);\n  }\n\n  return (\n    <div>\n      <h3>\n        search for high severity interactions with a single drug, or get all\n        interactions between multiple drugs.\n      </h3>\n      <Form onSubmit={handleSubmit}>\n        <Form.Label htmlFor=\"drugName\">search interactions:</Form.Label>\n        <Form.Control\n          name=\"drugName\"\n          placeholder=\"drug name(s)\"\n          value={searchTerm}\n          onChange={handleChange}\n        />\n        <br></br>\n        {currentUser.isLoggedIn ? (\n          <Form.Group controlId=\"formBasicCheckbox\">\n            <Form.Check\n              type=\"checkbox\"\n              label=\"add searched drugs to saved list\"\n              name=\"saveBool\"\n              value={checked}\n              onChange={changeBool}\n            />\n          </Form.Group>\n        ) : (\n          <span></span>\n        )}\n        <Form.Text id=\"searchHelpBlock\" muted>\n          please separate multiple drug names by commas\n        </Form.Text>\n        <br></br>\n        <Button type=\"submit\" className=\"btn btn-lg btn-dark\">\n          search\n        </Button>\n        <p id=\"error-holder\"></p>\n      </Form>\n      <br></br>\n    </div>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nfunction InteractionList(interactions) {\n  let interactionsObj = interactions.interactions;\n\n  if (interactionsObj.noneFound) {\n    return <p>{interactionsObj.noneFound}</p>;\n  }\n  let interactionsTable = [];\n  Object.entries(interactionsObj).forEach(([key, value]) => {\n    interactionsTable.push(\n      <tr key={key}>\n        <td>{value.name1}</td>\n        <td>{value.name2}</td>\n        <td>{value.description}</td>\n        <td>{value.severity}</td>\n        <td>{value.comment}</td>\n      </tr>\n    );\n  });\n  return (\n    <div>\n      <Table responsive striped bordered hover>\n        <thead>\n          <tr>\n            <th>drug 1</th>\n            <th>drug 2</th>\n            <th>description</th>\n            <th>severity</th>\n            <th>comment</th>\n          </tr>\n        </thead>\n        <tbody>{interactionsTable}</tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default InteractionList;\n","import { RESET_LOADING } from \"./types\";\n\nfunction resetLoading() {\n  return { type: RESET_LOADING };\n}\n\nexport { resetLoading };\n","import React from \"react\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nfunction LoadingPage(searchTerm) {\n  let loadingMsg;\n  if (searchTerm.searchTerm.includes(\",\")) {\n    loadingMsg = `Loading all interactions between ${searchTerm.searchTerm}...`;\n  } else {\n    loadingMsg = `Loading all high-severity interactions with ${searchTerm.searchTerm}...`;\n  }\n  return (\n    <div>\n      <p>{loadingMsg}</p>\n      <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    </div>\n  );\n}\n\nexport default LoadingPage;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport SearchForm from \"./SearchForm\";\nimport InteractionList from \"./InteractionList\";\nimport { resetLoading } from \"../actions/resetLoading\";\nimport LoadingPage from \"../LoadingPage\";\nimport { setSearchTerm } from \"../actions/searchTerm\";\n\nfunction Interactions() {\n  const interactions = useSelector((st) => st.drugs.interactions);\n  const loading = useSelector((st) => st.loading.loading);\n  const searchTerm = useSelector((st) => st.searchTerm.searchTerm);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (interactions) {\n      dispatch(resetLoading());\n      dispatch(setSearchTerm(\"\"));\n    }\n  }, [dispatch, interactions]);\n\n  return (\n    <div>\n      <SearchForm />\n\n      {loading ? (\n        <LoadingPage searchTerm={searchTerm}></LoadingPage>\n      ) : (\n        <p id=\"error-holder\"></p>\n      )}\n\n      {interactions ? (\n        Object.keys(interactions).length !== 0 ? (\n          <InteractionList interactions={interactions} />\n        ) : (\n          <p>sorry, no results were found</p>\n        )\n      ) : (\n        <p></p>\n      )}\n    </div>\n  );\n}\n\nexport default Interactions;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { resetLoading } from \"./actions/resetLoading\";\nimport { toggleLoading } from \"./actions/loading\";\nimport { getInteractionsFromAPI } from \"./actions/drugs\";\nimport InteractionList from \"./drugs/InteractionList\";\nimport LoadingPage from \"./LoadingPage\";\n\nfunction LoggedInHome(currentUser) {\n  const interactions = useSelector((st) => st.drugs.interactions);\n  const loading = useSelector((st) => st.loading.loading);\n  const dispatch = useDispatch();\n\n  const savedDrugsString = currentUser.currentUser.currentUser.savedDrugs.join(\n    \", \"\n  );\n\n  // get interactions with the users saved drugs, and toggle loading to true\n  useEffect(() => {\n    dispatch(getInteractionsFromAPI(savedDrugsString));\n    dispatch(toggleLoading());\n  }, [dispatch, savedDrugsString]);\n\n  // when the interactions are loaded, reset loading to false\n  useEffect(() => {\n    if (interactions) {\n      dispatch(resetLoading());\n    }\n  }, [dispatch, interactions]);\n\n  return (\n    <div>\n      <h2>\n        Welcome to the Drug Interaction Hub,{\" \"}\n        {currentUser.currentUser.currentUser.username}\n      </h2>\n      <h4>interactions with your saved medications:</h4>\n      {loading ? (\n        <LoadingPage searchTerm={savedDrugsString}></LoadingPage>\n      ) : (\n        <p id=\"error-holder\"></p>\n      )}\n      {interactions ? (\n        Object.keys(interactions).length !== 0 ? (\n          <InteractionList interactions={interactions} />\n        ) : (\n          <p>sorry, no results were found</p>\n        )\n      ) : (\n        <p></p>\n      )}{\" \"}\n    </div>\n  );\n}\n\nexport default LoggedInHome;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport LoggedInHome from \"./LoggedInHome\";\n\nfunction HomePage() {\n  const currentUser = useSelector((st) => st.currentUser);\n  // for users who are logged in but have no drugs saved\n  if (\n    currentUser.isLoggedIn &&\n    currentUser.currentUser.savedDrugs.length === 0\n  ) {\n    return (\n      <div>\n        <h1>\n          Welcome to the Drug Interaction Hub,{\" \"}\n          {currentUser.currentUser.username}\n        </h1>\n        <p>you haven't saved any medications yet!</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {currentUser.isLoggedIn ? (\n        <LoggedInHome currentUser={currentUser} />\n      ) : (\n        <div>\n          <h2>Welcome to the Drug Interaction Hub</h2>\n          <h4>log in or sign up to see your saved medications</h4>\n        </div>\n      )}\n      <h6 muted>\n        disclaimer: this site can not provide specific medical advice, and is\n        only intended to provide more information to users. please consult with\n        a physician before making medical decisions.\n      </h6>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { setCurrentUser } from \"../actions/currentUser\";\nimport DrugInteractionApi from \"../Api\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction Login() {\n  const currentUser = useSelector((st) => st.currentUser);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  if (currentUser && currentUser.isLoggedIn === true) {\n    return (\n      <div>\n        <h1>Log In</h1>\n        <h3>\n          please log {currentUser.currentUser.username} out before proceeding.\n        </h3>\n      </div>\n    );\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let loginError = document.getElementById(\"login-error\");\n    loginError.innerText = \"\";\n    try {\n      let result = await DrugInteractionApi.login(formData);\n      if (result.invalid) {\n        loginError.innerText = result.invalid;\n        setFormData({\n          username: \"\",\n          password: \"\",\n        });\n        return;\n      }\n      dispatch(setCurrentUser(result.username));\n      history.push(\"/\");\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n    }\n  }\n\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData((l) => ({ ...l, [name]: value }));\n  }\n\n  return (\n    <div>\n      <h1>Log In</h1>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group as={Row}>\n          <Form.Label column sm={2}>\n            username\n          </Form.Label>\n          <Col sm={10}>\n            <Form.Control\n              placeholder=\"username\"\n              name=\"username\"\n              value={formData.username}\n              onChange={handleChange}\n            />\n          </Col>\n        </Form.Group>\n        <Form.Group as={Row}>\n          <Form.Label column sm={2}>\n            password\n          </Form.Label>\n          <Col sm={10}>\n            <Form.Control\n              placeholder=\"password\"\n              type=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n            />\n          </Col>\n        </Form.Group>\n        <Button type=\"submit\">Log In</Button>\n        <p id=\"login-error\"></p>\n      </Form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { setCurrentUser } from \"../actions/currentUser\";\nimport DrugInteractionApi from \"../Api\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction Signup() {\n  /** form for signing up a new user */\n  const currentUser = useSelector((st) => st.currentUser);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    email: \"\",\n  });\n  if (currentUser && currentUser.isLoggedIn === true) {\n    return (\n      <div>\n        <h1>Sign Up</h1>\n        <h3>\n          please log {currentUser.currentUser.username} out before proceeding.\n        </h3>\n      </div>\n    );\n  }\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let signupError = document.getElementById(\"signup-error\");\n    signupError.innerText = \"\";\n\n    try {\n      let result = await DrugInteractionApi.signup(formData);\n      if (result.invalid) {\n        signupError.innerText = result.invalid;\n        setFormData({\n          username: \"\",\n          email: \"\",\n          password: \"\",\n        });\n        return;\n      }\n      dispatch(setCurrentUser(result.username));\n      history.push(\"/\");\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n    }\n  }\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setFormData((data) => ({ ...data, [name]: value }));\n  }\n\n  return (\n    <div>\n      <h1>Sign Up</h1>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group as={Row}>\n          <Form.Label column sm={2}>\n            username\n          </Form.Label>\n          <Col sm={10}>\n            <Form.Control\n              placeholder=\"username\"\n              name=\"username\"\n              value={formData.username}\n              onChange={handleChange}\n            />\n          </Col>\n        </Form.Group>\n        <Form.Group as={Row}>\n          <Form.Label column sm={2}>\n            email\n          </Form.Label>\n          <Col sm={10}>\n            <Form.Control\n              placeholder=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n            />\n          </Col>\n        </Form.Group>\n        <Form.Group as={Row}>\n          <Form.Label column sm={2}>\n            password\n          </Form.Label>\n          <Col sm={10}>\n            <Form.Control\n              placeholder=\"password\"\n              type=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n            />\n          </Col>\n        </Form.Group>\n        <Button type=\"submit\">Sign Up</Button>\n      </Form>\n      <p id=\"signup-error\"></p>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport DrugInteractionApi from \"../Api\";\nimport { setCurrentUser } from \"../actions/currentUser\";\nimport Button from \"react-bootstrap/Button\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport \"./UserPage.css\";\n\nfunction UserPage() {\n  const { username } = useParams();\n  const dispatch = useDispatch();\n\n  const currentUser = useSelector((st) => st.currentUser);\n  // if they're not logged in as this user, show error page\n  if (currentUser.isLoggedIn !== true) {\n    return (\n      <h1>you must be logged in as {username} in order to view this page</h1>\n    );\n  } else if (currentUser.currentUser.username !== username) {\n    return (\n      <h1>you must be logged in as {username} in order to view this page</h1>\n    );\n  }\n  const savedDrugs = currentUser.currentUser.savedDrugs;\n  async function unsave(e) {\n    e.preventDefault();\n    await DrugInteractionApi.unsaveDrug(username, e.target.value);\n    dispatch(setCurrentUser(username));\n  }\n\n  // otherwise show a list of their saved drugs, and each should have a button to unsave\n  return (\n    <div>\n      <h1>{username}'s saved drugs</h1>\n      {savedDrugs.length === 0 ? (\n        <p>you haven't saved any drugs yet!</p>\n      ) : (\n        <ListGroup id=\"list-group\">\n          {savedDrugs.map((d) => (\n            <ListGroup.Item key={d}>\n              {d}{\" \"}\n              <Button\n                onClick={unsave}\n                value={d}\n                size=\"sm\"\n                variant=\"outline-danger\"\n              >\n                {\"  \"}X{\"  \"}\n              </Button>\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      )}\n    </div>\n  );\n}\n\nexport default UserPage;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Interactions from \"./drugs/Interactions\";\nimport HomePage from \"./HomePage\";\nimport Login from \"./users/Login\";\nimport Signup from \"./users/Signup\";\nimport UserPage from \"./users/UserPage\";\n\nfunction Routes() {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <HomePage />\n      </Route>\n      <Route exact path=\"/interactions\">\n        <Interactions />\n      </Route>\n      <Route exact path=\"/login\">\n        <Login />\n      </Route>\n      <Route exact path=\"/signup\">\n        <Signup />\n      </Route>\n      <Route exact path=\"/users/:username\">\n        <UserPage />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport NavBar from \"./NavBar\";\nimport Routes from \"./Routes\";\n\n/*** App renders the NavBar and Routes within the Browser Router. top-level component. */\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <BrowserRouter>\n        <NavBar />\n        <Routes />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { SEARCH_DRUGS, RESET_INTERACTIONS } from \"../actions/types\";\nconst INITIAL_STATE = {};\n\nfunction drugs(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case RESET_INTERACTIONS:\n      return { ...INITIAL_STATE };\n\n    case SEARCH_DRUGS:\n      return {\n        ...state,\n        interactions: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default drugs;\n","import { TOGGLE_LOADING, RESET_LOADING } from \"../actions/types\";\nconst INITIAL_STATE = { loading: false };\n\nfunction loading(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case TOGGLE_LOADING:\n      return { ...state, loading: !state.loading };\n    case RESET_LOADING:\n      return { ...INITIAL_STATE };\n    default:\n      return state;\n  }\n}\n\nexport default loading;\n","import { SET_SEARCH_TERM } from \"../actions/types\";\nconst INITIAL_STATE = { searchTerm: \"\" };\n\nfunction searchTerm(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case SET_SEARCH_TERM:\n      return {\n        ...state,\n        searchTerm: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default searchTerm;\n","import { SET_CURRENT_USER, LOG_OUT } from \"../actions/types\";\nconst user = localStorage.getItem(\"currentUser\");\nconst INITIAL_STATE = user\n  ? { isLoggedIn: true, currentUser: JSON.parse(user) }\n  : { isLoggedIn: false, currentUser: null };\n\nfunction currentUser(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        isLoggedIn: true,\n        currentUser: action.payload,\n      };\n    case LOG_OUT:\n      return { ...INITIAL_STATE };\n    default:\n      return state;\n  }\n}\n\nexport default currentUser;\n","import { combineReducers } from \"redux\";\nimport drugs from \"./drugs\";\nimport loading from \"./loading\";\nimport searchTerm from \"./searchTerm\";\nimport currentUser from \"./currentUser\";\n\nexport default combineReducers({\n  drugs,\n  loading,\n  searchTerm,\n  currentUser,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport root from \"./reducers/root\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst store = createStore(\n  root,\n  compose(\n    applyMiddleware(thunk)\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}